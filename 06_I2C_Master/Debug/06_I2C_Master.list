
06_I2C_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000414  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d8  080005e0  000015e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005d8  080005d8  000015e0  2**0
                  CONTENTS
  4 .ARM          00000000  080005d8  080005d8  000015e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d8  080005e0  000015e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d8  080005d8  000015d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005dc  080005dc  000015dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080005e0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005e0  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004ef  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000017a  00000000  00000000  00001aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00001c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000057  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189a6  00000000  00000000  00001d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000853  00000000  00000000  0001a6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa0f  00000000  00000000  0001af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a595f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000015c  00000000  00000000  000a59a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a5b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005c0 	.word	0x080005c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080005c0 	.word	0x080005c0

08000204 <main>:

void delyMS(int delay);


int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	Address=0x12;
 8000208:	4b0d      	ldr	r3, [pc, #52]	@ (8000240 <main+0x3c>)
 800020a:	2212      	movs	r2, #18
 800020c:	701a      	strb	r2, [r3, #0]
	Address=Address << 1;
 800020e:	4b0c      	ldr	r3, [pc, #48]	@ (8000240 <main+0x3c>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <main+0x3c>)
 8000218:	701a      	strb	r2, [r3, #0]
	I2C1_init();
 800021a:	f000 f815 	bl	8000248 <I2C1_init>
	I2C_CON_REG();
 800021e:	f000 f8af 	bl	8000380 <I2C_CON_REG>
	I2C_Master_tx();
 8000222:	f000 f8dd 	bl	80003e0 <I2C_Master_tx>
	I2C_Master_send_Adress();
 8000226:	f000 f8fd 	bl	8000424 <I2C_Master_send_Adress>
    I2C_Master_send_Data(25);
 800022a:	2019      	movs	r0, #25
 800022c:	f000 f91c 	bl	8000468 <I2C_Master_send_Data>
    read =I2C_Master_read_data();
 8000230:	f000 f93a 	bl	80004a8 <I2C_Master_read_data>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	4b02      	ldr	r3, [pc, #8]	@ (8000244 <main+0x40>)
 800023a:	701a      	strb	r2, [r3, #0]

	//I2C_Master_send_Data(85);
	while(1)
 800023c:	bf00      	nop
 800023e:	e7fd      	b.n	800023c <main+0x38>
 8000240:	2000001c 	.word	0x2000001c
 8000244:	2000001e 	.word	0x2000001e

08000248 <I2C1_init>:
	}

}

void I2C1_init(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	//ENABLE CLOCK TO I2C & GPIOB
	RCC->AHB1ENR |= (1<<1);
 800024c:	4b4a      	ldr	r3, [pc, #296]	@ (8000378 <I2C1_init+0x130>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000250:	4a49      	ldr	r2, [pc, #292]	@ (8000378 <I2C1_init+0x130>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= (1<<21);
 8000258:	4b47      	ldr	r3, [pc, #284]	@ (8000378 <I2C1_init+0x130>)
 800025a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800025c:	4a46      	ldr	r2, [pc, #280]	@ (8000378 <I2C1_init+0x130>)
 800025e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000262:	6413      	str	r3, [r2, #64]	@ 0x40
	//GPIOB AS ALTERNATE FUNCTION MODE
	GPIOB->MODER |= (1<<17);
 8000264:	4b45      	ldr	r3, [pc, #276]	@ (800037c <I2C1_init+0x134>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a44      	ldr	r2, [pc, #272]	@ (800037c <I2C1_init+0x134>)
 800026a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800026e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<16);
 8000270:	4b42      	ldr	r3, [pc, #264]	@ (800037c <I2C1_init+0x134>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a41      	ldr	r2, [pc, #260]	@ (800037c <I2C1_init+0x134>)
 8000276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800027a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<19);
 800027c:	4b3f      	ldr	r3, [pc, #252]	@ (800037c <I2C1_init+0x134>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a3e      	ldr	r2, [pc, #248]	@ (800037c <I2C1_init+0x134>)
 8000282:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<18);
 8000288:	4b3c      	ldr	r3, [pc, #240]	@ (800037c <I2C1_init+0x134>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a3b      	ldr	r2, [pc, #236]	@ (800037c <I2C1_init+0x134>)
 800028e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000292:	6013      	str	r3, [r2, #0]
	//GPIOB AS OPEN DRAIN
	GPIOB->OTYPER |= (1<<8);
 8000294:	4b39      	ldr	r3, [pc, #228]	@ (800037c <I2C1_init+0x134>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a38      	ldr	r2, [pc, #224]	@ (800037c <I2C1_init+0x134>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800029e:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1<<9);
 80002a0:	4b36      	ldr	r3, [pc, #216]	@ (800037c <I2C1_init+0x134>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	4a35      	ldr	r2, [pc, #212]	@ (800037c <I2C1_init+0x134>)
 80002a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002aa:	6053      	str	r3, [r2, #4]
	//GPIOB AS HIGH SPEED
	GPIOB->OSPEEDR |= (1<<16);
 80002ac:	4b33      	ldr	r3, [pc, #204]	@ (800037c <I2C1_init+0x134>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a32      	ldr	r2, [pc, #200]	@ (800037c <I2C1_init+0x134>)
 80002b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002b6:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<<17);
 80002b8:	4b30      	ldr	r3, [pc, #192]	@ (800037c <I2C1_init+0x134>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a2f      	ldr	r2, [pc, #188]	@ (800037c <I2C1_init+0x134>)
 80002be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<<18);
 80002c4:	4b2d      	ldr	r3, [pc, #180]	@ (800037c <I2C1_init+0x134>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a2c      	ldr	r2, [pc, #176]	@ (800037c <I2C1_init+0x134>)
 80002ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002ce:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<<19);
 80002d0:	4b2a      	ldr	r3, [pc, #168]	@ (800037c <I2C1_init+0x134>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a29      	ldr	r2, [pc, #164]	@ (800037c <I2C1_init+0x134>)
 80002d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002da:	6093      	str	r3, [r2, #8]
	//GPIOB AS PUSH PULL
	GPIOB->PUPDR &= ~(1<<19);
 80002dc:	4b27      	ldr	r3, [pc, #156]	@ (800037c <I2C1_init+0x134>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a26      	ldr	r2, [pc, #152]	@ (800037c <I2C1_init+0x134>)
 80002e2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80002e6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (1<<18);
 80002e8:	4b24      	ldr	r3, [pc, #144]	@ (800037c <I2C1_init+0x134>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a23      	ldr	r2, [pc, #140]	@ (800037c <I2C1_init+0x134>)
 80002ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002f2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1<<17);
 80002f4:	4b21      	ldr	r3, [pc, #132]	@ (800037c <I2C1_init+0x134>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a20      	ldr	r2, [pc, #128]	@ (800037c <I2C1_init+0x134>)
 80002fa:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80002fe:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (1<<16);
 8000300:	4b1e      	ldr	r3, [pc, #120]	@ (800037c <I2C1_init+0x134>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a1d      	ldr	r2, [pc, #116]	@ (800037c <I2C1_init+0x134>)
 8000306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800030a:	60d3      	str	r3, [r2, #12]
	//GPIOB P8 P9 AS I2C AFRH
	GPIOB->AFR[1]|= (1<<2);
 800030c:	4b1b      	ldr	r3, [pc, #108]	@ (800037c <I2C1_init+0x134>)
 800030e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000310:	4a1a      	ldr	r2, [pc, #104]	@ (800037c <I2C1_init+0x134>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1]|= (1<<6);
 8000318:	4b18      	ldr	r3, [pc, #96]	@ (800037c <I2C1_init+0x134>)
 800031a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800031c:	4a17      	ldr	r2, [pc, #92]	@ (800037c <I2C1_init+0x134>)
 800031e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000322:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1]&= ~(1<<0);
 8000324:	4b15      	ldr	r3, [pc, #84]	@ (800037c <I2C1_init+0x134>)
 8000326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000328:	4a14      	ldr	r2, [pc, #80]	@ (800037c <I2C1_init+0x134>)
 800032a:	f023 0301 	bic.w	r3, r3, #1
 800032e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1]&= ~(1<<1);
 8000330:	4b12      	ldr	r3, [pc, #72]	@ (800037c <I2C1_init+0x134>)
 8000332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000334:	4a11      	ldr	r2, [pc, #68]	@ (800037c <I2C1_init+0x134>)
 8000336:	f023 0302 	bic.w	r3, r3, #2
 800033a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1]&= ~(1<<3);
 800033c:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <I2C1_init+0x134>)
 800033e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000340:	4a0e      	ldr	r2, [pc, #56]	@ (800037c <I2C1_init+0x134>)
 8000342:	f023 0308 	bic.w	r3, r3, #8
 8000346:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1]&= ~(1<<4);
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <I2C1_init+0x134>)
 800034a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800034c:	4a0b      	ldr	r2, [pc, #44]	@ (800037c <I2C1_init+0x134>)
 800034e:	f023 0310 	bic.w	r3, r3, #16
 8000352:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1]&= ~(1<<5);
 8000354:	4b09      	ldr	r3, [pc, #36]	@ (800037c <I2C1_init+0x134>)
 8000356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000358:	4a08      	ldr	r2, [pc, #32]	@ (800037c <I2C1_init+0x134>)
 800035a:	f023 0320 	bic.w	r3, r3, #32
 800035e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1]&= ~(1<<7);
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <I2C1_init+0x134>)
 8000362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000364:	4a05      	ldr	r2, [pc, #20]	@ (800037c <I2C1_init+0x134>)
 8000366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800036a:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800
 800037c:	40020400 	.word	0x40020400

08000380 <I2C_CON_REG>:

void I2C_CON_REG(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	I2C1->CR1 &= ~(1U<<0);
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <I2C_CON_REG+0x5c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <I2C_CON_REG+0x5c>)
 800038a:	f023 0301 	bic.w	r3, r3, #1
 800038e:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<15);
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <I2C_CON_REG+0x5c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <I2C_CON_REG+0x5c>)
 8000396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800039a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<15);
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <I2C_CON_REG+0x5c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0e      	ldr	r2, [pc, #56]	@ (80003dc <I2C_CON_REG+0x5c>)
 80003a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003a6:	6013      	str	r3, [r2, #0]
	I2C1->OAR1 = 36;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <I2C_CON_REG+0x5c>)
 80003aa:	2224      	movs	r2, #36	@ 0x24
 80003ac:	609a      	str	r2, [r3, #8]
	I2C1->CR2 |= (45<<0);
 80003ae:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <I2C_CON_REG+0x5c>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	4a0a      	ldr	r2, [pc, #40]	@ (80003dc <I2C_CON_REG+0x5c>)
 80003b4:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
 80003b8:	6053      	str	r3, [r2, #4]
	I2C1->CCR = 225<<0;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <I2C_CON_REG+0x5c>)
 80003bc:	22e1      	movs	r2, #225	@ 0xe1
 80003be:	61da      	str	r2, [r3, #28]
	I2C1->TRISE = 46;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <I2C_CON_REG+0x5c>)
 80003c2:	222e      	movs	r2, #46	@ 0x2e
 80003c4:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= (1U<<0);
 80003c6:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <I2C_CON_REG+0x5c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <I2C_CON_REG+0x5c>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6013      	str	r3, [r2, #0]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40005400 	.word	0x40005400

080003e0 <I2C_Master_tx>:

void I2C_Master_tx(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
	uint16_t reg;
	I2C1->CR1 &=~(1<<11);
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <I2C_Master_tx+0x40>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000420 <I2C_Master_tx+0x40>)
 80003ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003f0:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<8);
 80003f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000420 <I2C_Master_tx+0x40>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000420 <I2C_Master_tx+0x40>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003fc:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & (1<<0))){}
 80003fe:	bf00      	nop
 8000400:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <I2C_Master_tx+0x40>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f9      	beq.n	8000400 <I2C_Master_tx+0x20>
	reg = I2C1->SR1;
 800040c:	4b04      	ldr	r3, [pc, #16]	@ (8000420 <I2C_Master_tx+0x40>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	80fb      	strh	r3, [r7, #6]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40005400 	.word	0x40005400

08000424 <I2C_Master_send_Adress>:

void I2C_Master_send_Adress(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
	uint16_t reg1;
	I2C1->DR = 0x12<<1;
 800042a:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <I2C_Master_send_Adress+0x40>)
 800042c:	2224      	movs	r2, #36	@ 0x24
 800042e:	611a      	str	r2, [r3, #16]
	while(!(I2C1 -> SR1 & (1<<1))){}
 8000430:	bf00      	nop
 8000432:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <I2C_Master_send_Adress+0x40>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f9      	beq.n	8000432 <I2C_Master_send_Adress+0xe>
	reg1 = 0x00;
 800043e:	2300      	movs	r3, #0
 8000440:	80fb      	strh	r3, [r7, #6]
	reg1 = I2C1->SR2;
 8000442:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <I2C_Master_send_Adress+0x40>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	80fb      	strh	r3, [r7, #6]
	while(!(I2C1 -> SR1 & (1<<7))){}
 8000448:	bf00      	nop
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <I2C_Master_send_Adress+0x40>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <I2C_Master_send_Adress+0x26>
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40005400 	.word	0x40005400

08000468 <I2C_Master_send_Data>:

void I2C_Master_send_Data(uint8_t data)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000472:	bf00      	nop
 8000474:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <I2C_Master_send_Data+0x3c>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0f9      	beq.n	8000474 <I2C_Master_send_Data+0xc>
	I2C1->DR = data;
 8000480:	4a08      	ldr	r2, [pc, #32]	@ (80004a4 <I2C_Master_send_Data+0x3c>)
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000486:	bf00      	nop
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <I2C_Master_send_Data+0x3c>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	2b00      	cmp	r3, #0
 8000492:	d0f9      	beq.n	8000488 <I2C_Master_send_Data+0x20>
}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40005400 	.word	0x40005400

080004a8 <I2C_Master_read_data>:

uint8_t I2C_Master_read_data(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	I2C_Master_tx();
 80004ae:	f7ff ff97 	bl	80003e0 <I2C_Master_tx>
	uint16_t reg1;
	I2C1->DR = (0x12<<1) | 1;
 80004b2:	4b1a      	ldr	r3, [pc, #104]	@ (800051c <I2C_Master_read_data+0x74>)
 80004b4:	2225      	movs	r2, #37	@ 0x25
 80004b6:	611a      	str	r2, [r3, #16]
	while(!(I2C1 -> SR1 & (1<<1))){}
 80004b8:	bf00      	nop
 80004ba:	4b18      	ldr	r3, [pc, #96]	@ (800051c <I2C_Master_read_data+0x74>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <I2C_Master_read_data+0x12>
	reg1 = 0x00;
 80004c6:	2300      	movs	r3, #0
 80004c8:	80fb      	strh	r3, [r7, #6]
	reg1 = I2C1->SR2;
 80004ca:	4b14      	ldr	r3, [pc, #80]	@ (800051c <I2C_Master_read_data+0x74>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	80fb      	strh	r3, [r7, #6]
	while(!(I2C1 -> SR1 & (1<<7))){}
 80004d0:	bf00      	nop
 80004d2:	4b12      	ldr	r3, [pc, #72]	@ (800051c <I2C_Master_read_data+0x74>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <I2C_Master_read_data+0x2a>

	while(!(I2C1->SR1 & (I2C_SR1_RXNE))){}
 80004de:	bf00      	nop
 80004e0:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <I2C_Master_read_data+0x74>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d0f9      	beq.n	80004e0 <I2C_Master_read_data+0x38>
	        data = I2C1->DR;
 80004ec:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <I2C_Master_read_data+0x74>)
 80004ee:	691b      	ldr	r3, [r3, #16]
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <I2C_Master_read_data+0x78>)
 80004f4:	701a      	strb	r2, [r3, #0]
	while (!(I2C1->SR1 & I2C_SR1_BTF));
 80004f6:	bf00      	nop
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <I2C_Master_read_data+0x74>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0f9      	beq.n	80004f8 <I2C_Master_read_data+0x50>
	I2C1->CR1 |= I2C_CR1_ACK;     // Enable acknowledge
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <I2C_Master_read_data+0x74>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a04      	ldr	r2, [pc, #16]	@ (800051c <I2C_Master_read_data+0x74>)
 800050a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800050e:	6013      	str	r3, [r2, #0]

	        return data;
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <I2C_Master_read_data+0x78>)
 8000512:	781b      	ldrb	r3, [r3, #0]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40005400 	.word	0x40005400
 8000520:	2000001d 	.word	0x2000001d

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	@ (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	@ (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	@ (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	@ (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	@ (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f000 f811 	bl	8000578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff fe55 	bl	8000204 <main>

0800055a <LoopForever>:

LoopForever:
  b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000568:	080005e0 	.word	0x080005e0
  ldr r2, =_sbss
 800056c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000570:	20000020 	.word	0x20000020

08000574 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC_IRQHandler>
	...

08000578 <__libc_init_array>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	4d0d      	ldr	r5, [pc, #52]	@ (80005b0 <__libc_init_array+0x38>)
 800057c:	4c0d      	ldr	r4, [pc, #52]	@ (80005b4 <__libc_init_array+0x3c>)
 800057e:	1b64      	subs	r4, r4, r5
 8000580:	10a4      	asrs	r4, r4, #2
 8000582:	2600      	movs	r6, #0
 8000584:	42a6      	cmp	r6, r4
 8000586:	d109      	bne.n	800059c <__libc_init_array+0x24>
 8000588:	4d0b      	ldr	r5, [pc, #44]	@ (80005b8 <__libc_init_array+0x40>)
 800058a:	4c0c      	ldr	r4, [pc, #48]	@ (80005bc <__libc_init_array+0x44>)
 800058c:	f000 f818 	bl	80005c0 <_init>
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	10a4      	asrs	r4, r4, #2
 8000594:	2600      	movs	r6, #0
 8000596:	42a6      	cmp	r6, r4
 8000598:	d105      	bne.n	80005a6 <__libc_init_array+0x2e>
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a0:	4798      	blx	r3
 80005a2:	3601      	adds	r6, #1
 80005a4:	e7ee      	b.n	8000584 <__libc_init_array+0xc>
 80005a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005aa:	4798      	blx	r3
 80005ac:	3601      	adds	r6, #1
 80005ae:	e7f2      	b.n	8000596 <__libc_init_array+0x1e>
 80005b0:	080005d8 	.word	0x080005d8
 80005b4:	080005d8 	.word	0x080005d8
 80005b8:	080005d8 	.word	0x080005d8
 80005bc:	080005dc 	.word	0x080005dc

080005c0 <_init>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr

080005cc <_fini>:
 80005cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ce:	bf00      	nop
 80005d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d2:	bc08      	pop	{r3}
 80005d4:	469e      	mov	lr, r3
 80005d6:	4770      	bx	lr
