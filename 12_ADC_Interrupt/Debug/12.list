
12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000410  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000408  08000408  00001410  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00001410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000410  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00001408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000410  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000410  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000898  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000020c  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000050  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189dc  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000686  00000000  00000000  0001a98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afe8  00000000  00000000  0001b012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5ffa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000114  00000000  00000000  000a6040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000a6154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003f0 	.word	0x080003f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003f0 	.word	0x080003f0

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <adc_callback>:
void start_converstion(void);
uint32_t adc_read(void);


static void adc_callback(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	sensor_value =adc_read();
 8000244:	f000 f874 	bl	8000330 <adc_read>
 8000248:	4603      	mov	r3, r0
 800024a:	461a      	mov	r2, r3
 800024c:	4b01      	ldr	r3, [pc, #4]	@ (8000254 <adc_callback+0x14>)
 800024e:	601a      	str	r2, [r3, #0]

}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	2000001c 	.word	0x2000001c

08000258 <ADC_IRQHandler>:

void ADC_IRQHandler (void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	 if((ADC1->SR & SR_EOC) !=0)
 800025c:	4b07      	ldr	r3, [pc, #28]	@ (800027c <ADC_IRQHandler+0x24>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f003 0302 	and.w	r3, r3, #2
 8000264:	2b00      	cmp	r3, #0
 8000266:	d007      	beq.n	8000278 <ADC_IRQHandler+0x20>
	 {
		 /*Clear EOC*/
		 ADC1->SR &= ~ SR_EOC;
 8000268:	4b04      	ldr	r3, [pc, #16]	@ (800027c <ADC_IRQHandler+0x24>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a03      	ldr	r2, [pc, #12]	@ (800027c <ADC_IRQHandler+0x24>)
 800026e:	f023 0302 	bic.w	r3, r3, #2
 8000272:	6013      	str	r3, [r2, #0]

		 adc_callback();
 8000274:	f7ff ffe4 	bl	8000240 <adc_callback>
	 }
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40012000 	.word	0x40012000

08000280 <main>:


int main()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	pa1_adc_interrupt_init();
 8000284:	f000 f806 	bl	8000294 <pa1_adc_interrupt_init>
	start_converstion();
 8000288:	f000 f83c 	bl	8000304 <start_converstion>
 800028c:	2300      	movs	r3, #0
	//sensor_value=adc_read();

}
 800028e:	4618      	mov	r0, r3
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <pa1_adc_interrupt_init>:



void pa1_adc_interrupt_init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	/***********Configure the ADC GPIOA Pins*******************/

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000298:	4b17      	ldr	r3, [pc, #92]	@ (80002f8 <pa1_adc_interrupt_init+0x64>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029c:	4a16      	ldr	r2, [pc, #88]	@ (80002f8 <pa1_adc_interrupt_init+0x64>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6313      	str	r3, [r2, #48]	@ 0x30

	/*SET mode of PA1 as analog pin */
	GPIOA->MODER |= (1U<<2);
 80002a4:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <pa1_adc_interrupt_init+0x68>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a14      	ldr	r2, [pc, #80]	@ (80002fc <pa1_adc_interrupt_init+0x68>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 80002b0:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <pa1_adc_interrupt_init+0x68>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a11      	ldr	r2, [pc, #68]	@ (80002fc <pa1_adc_interrupt_init+0x68>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6013      	str	r3, [r2, #0]

	/***********Configure the ADC Module*******************/
	/*Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <pa1_adc_interrupt_init+0x64>)
 80002be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002c0:	4a0d      	ldr	r2, [pc, #52]	@ (80002f8 <pa1_adc_interrupt_init+0x64>)
 80002c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002c6:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Enable ADC end of conversion interrupt */
	ADC1->CR1 |= CR1_EOCIE;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <pa1_adc_interrupt_init+0x6c>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000300 <pa1_adc_interrupt_init+0x6c>)
 80002ce:	f043 0320 	orr.w	r3, r3, #32
 80002d2:	6053      	str	r3, [r2, #4]

	/*Enable adc interrupt in nvic*/
	NVIC_EnableIRQ(ADC_IRQn);
 80002d4:	2012      	movs	r0, #18
 80002d6:	f7ff ff95 	bl	8000204 <__NVIC_EnableIRQ>

	/*Conversion sequence start */
	ADC1->SQR3 = ADC_CH1;
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <pa1_adc_interrupt_init+0x6c>)
 80002dc:	2201      	movs	r2, #1
 80002de:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Conversion sequence length */
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002e0:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <pa1_adc_interrupt_init+0x6c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	62da      	str	r2, [r3, #44]	@ 0x2c


	/*Enable ADC module*/
	ADC1->CR2 |= CR2_ADON;
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <pa1_adc_interrupt_init+0x6c>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	4a05      	ldr	r2, [pc, #20]	@ (8000300 <pa1_adc_interrupt_init+0x6c>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6093      	str	r3, [r2, #8]
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40023800 	.word	0x40023800
 80002fc:	40020000 	.word	0x40020000
 8000300:	40012000 	.word	0x40012000

08000304 <start_converstion>:



void start_converstion(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	/*Enable contineous conversion*/
	ADC1->CR2 |= CR2_CONT;
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <start_converstion+0x28>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a07      	ldr	r2, [pc, #28]	@ (800032c <start_converstion+0x28>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	6093      	str	r3, [r2, #8]
	/*Start adc conversion */
	ADC1->CR2 |= CR2_SWSTART;
 8000314:	4b05      	ldr	r3, [pc, #20]	@ (800032c <start_converstion+0x28>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a04      	ldr	r2, [pc, #16]	@ (800032c <start_converstion+0x28>)
 800031a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800031e:	6093      	str	r3, [r2, #8]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40012000 	.word	0x40012000

08000330 <adc_read>:

uint32_t adc_read(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 8000334:	bf00      	nop
 8000336:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <adc_read+0x20>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 0302 	and.w	r3, r3, #2
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0f9      	beq.n	8000336 <adc_read+0x6>

	/*Read Converted result*/
	return (ADC1->DR);
 8000342:	4b03      	ldr	r3, [pc, #12]	@ (8000350 <adc_read+0x20>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c

	ADC1->CR2 &=~(1U<<0);

}
 8000346:	4618      	mov	r0, r3
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40012000 	.word	0x40012000

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	@ (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	@ (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	@ (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	@ (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	@ (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 f811 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ff7b 	bl	8000280 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000398:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 800039c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a0:	20000020 	.word	0x20000020

080003a4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <BusFault_Handler>
	...

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	@ (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	@ (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	@ (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	@ (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
