
04_uart_tx_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000039c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000560  08000560  00001560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000570  08000570  00001578  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00001578  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000578  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00001570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000574  08000574  00001574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  08000578  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000578  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000097f  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000299  00000000  00000000  00001f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  000021c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000063  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196bd  00000000  00000000  000022b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000956  00000000  00000000  0001b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebaa  00000000  00000000  0001c2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aae70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001cc  00000000  00000000  000aaeb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000ab080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000548 	.word	0x08000548

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000548 	.word	0x08000548

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <uart_callback>:
#define GPIOAEN (1U<<0)
#define GPIOA_5 (1U<<5)
#define LED_PIN  GPIOA_5

static void uart_callback(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0



			  rx_data[i]=USART2->DR;;
 8000244:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <uart_callback+0x40>)
 8000246:	685a      	ldr	r2, [r3, #4]
 8000248:	4b0e      	ldr	r3, [pc, #56]	@ (8000284 <uart_callback+0x44>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	b2d1      	uxtb	r1, r2
 800024e:	4a0e      	ldr	r2, [pc, #56]	@ (8000288 <uart_callback+0x48>)
 8000250:	54d1      	strb	r1, [r2, r3]
			  i++;
 8000252:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <uart_callback+0x44>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <uart_callback+0x44>)
 800025a:	6013      	str	r3, [r2, #0]
			  if(i==5)
 800025c:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <uart_callback+0x44>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b05      	cmp	r3, #5
 8000262:	d10b      	bne.n	800027c <uart_callback+0x3c>
			  {
				strcpy(buffer, rx_data);
 8000264:	4908      	ldr	r1, [pc, #32]	@ (8000288 <uart_callback+0x48>)
 8000266:	4809      	ldr	r0, [pc, #36]	@ (800028c <uart_callback+0x4c>)
 8000268:	f000 f966 	bl	8000538 <strcpy>
				memset(rx_data, 0, 5);
 800026c:	2205      	movs	r2, #5
 800026e:	2100      	movs	r1, #0
 8000270:	4805      	ldr	r0, [pc, #20]	@ (8000288 <uart_callback+0x48>)
 8000272:	f000 f934 	bl	80004de <memset>
				i=0;
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <uart_callback+0x44>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
			  }
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40004400 	.word	0x40004400
 8000284:	2000001c 	.word	0x2000001c
 8000288:	20000020 	.word	0x20000020
 800028c:	20000028 	.word	0x20000028

08000290 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	if(USART2->SR & SR_RXNE)
 8000294:	4b04      	ldr	r3, [pc, #16]	@ (80002a8 <USART2_IRQHandler+0x18>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <USART2_IRQHandler+0x14>
	{
		uart_callback();
 80002a0:	f7ff ffce 	bl	8000240 <uart_callback>

	}
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40004400 	.word	0x40004400

080002ac <main>:

int main()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	@ (80002e8 <main+0x3c>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b4:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <main+0x3c>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6313      	str	r3, [r2, #48]	@ 0x30

		/*define pa5 as output in moder register*/
		GPIOA->MODER |= (1U<<10);
 80002bc:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <main+0x40>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0a      	ldr	r2, [pc, #40]	@ (80002ec <main+0x40>)
 80002c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002c6:	6013      	str	r3, [r2, #0]
		GPIOA->MODER &= ~(1U<<11);
 80002c8:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <main+0x40>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a07      	ldr	r2, [pc, #28]	@ (80002ec <main+0x40>)
 80002ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002d2:	6013      	str	r3, [r2, #0]
	uart2_rxtx_interrupt_init();
 80002d4:	f000 f810 	bl	80002f8 <uart2_rxtx_interrupt_init>

	while(1)
	{
		USART_Text_Write_UART2("Mayur_patil");
 80002d8:	4805      	ldr	r0, [pc, #20]	@ (80002f0 <main+0x44>)
 80002da:	f000 f89d 	bl	8000418 <USART_Text_Write_UART2>
		USART_Text_Write_UART2("m");
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <main+0x48>)
 80002e0:	f000 f89a 	bl	8000418 <USART_Text_Write_UART2>
		USART_Text_Write_UART2("Mayur_patil");
 80002e4:	bf00      	nop
 80002e6:	e7f7      	b.n	80002d8 <main+0x2c>
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40020000 	.word	0x40020000
 80002f0:	08000560 	.word	0x08000560
 80002f4:	0800056c 	.word	0x0800056c

080002f8 <uart2_rxtx_interrupt_init>:




void uart2_rxtx_interrupt_init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable Clock acess to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80002fc:	4b36      	ldr	r3, [pc, #216]	@ (80003d8 <uart2_rxtx_interrupt_init+0xe0>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000300:	4a35      	ldr	r2, [pc, #212]	@ (80003d8 <uart2_rxtx_interrupt_init+0xe0>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000308:	4b34      	ldr	r3, [pc, #208]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a33      	ldr	r2, [pc, #204]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800030e:	f023 0310 	bic.w	r3, r3, #16
 8000312:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800031a:	f043 0320 	orr.w	r3, r3, #32
 800031e:	6013      	str	r3, [r2, #0]

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER |=(1U<<7);
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a2d      	ldr	r2, [pc, #180]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<6);
 800032c:	4b2b      	ldr	r3, [pc, #172]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a2a      	ldr	r2, [pc, #168]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000336:	6013      	str	r3, [r2, #0]


	/*Set PA2 alternate function type to UART_TX (AF7)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000338:	4b28      	ldr	r3, [pc, #160]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800033a:	6a1b      	ldr	r3, [r3, #32]
 800033c:	4a27      	ldr	r2, [pc, #156]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800033e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000342:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000344:	4b25      	ldr	r3, [pc, #148]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a24      	ldr	r2, [pc, #144]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800034a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800034e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000350:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000352:	6a1b      	ldr	r3, [r3, #32]
 8000354:	4a21      	ldr	r2, [pc, #132]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800035a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800035c:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800035e:	6a1b      	ldr	r3, [r3, #32]
 8000360:	4a1e      	ldr	r2, [pc, #120]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000366:	6213      	str	r3, [r2, #32]

	/*Set PA3 alternate function type to UART_RX (AF7)*/
	GPIOA->AFR[0] |= (1U<<12);
 8000368:	4b1c      	ldr	r3, [pc, #112]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800036a:	6a1b      	ldr	r3, [r3, #32]
 800036c:	4a1b      	ldr	r2, [pc, #108]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800036e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000372:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000374:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	4a18      	ldr	r2, [pc, #96]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800037a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800037e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000380:	4b16      	ldr	r3, [pc, #88]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000382:	6a1b      	ldr	r3, [r3, #32]
 8000384:	4a15      	ldr	r2, [pc, #84]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800038a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800038c:	4b13      	ldr	r3, [pc, #76]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	4a12      	ldr	r2, [pc, #72]	@ (80003dc <uart2_rxtx_interrupt_init+0xe4>)
 8000392:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000396:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable Clock acess to uart2*/
	RCC->APB1ENR |= UART2EN;
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <uart2_rxtx_interrupt_init+0xe0>)
 800039a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800039c:	4a0e      	ldr	r2, [pc, #56]	@ (80003d8 <uart2_rxtx_interrupt_init+0xe0>)
 800039e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003a2:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80003a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a8:	490d      	ldr	r1, [pc, #52]	@ (80003e0 <uart2_rxtx_interrupt_init+0xe8>)
 80003aa:	480e      	ldr	r0, [pc, #56]	@ (80003e4 <uart2_rxtx_interrupt_init+0xec>)
 80003ac:	f000 f849 	bl	8000442 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <uart2_rxtx_interrupt_init+0xec>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	60da      	str	r2, [r3, #12]

	/*Enable RXNE interrupt*/
	USART2->CR1 |= CR1_RXNEIE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <uart2_rxtx_interrupt_init+0xec>)
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	4a0a      	ldr	r2, [pc, #40]	@ (80003e4 <uart2_rxtx_interrupt_init+0xec>)
 80003bc:	f043 0320 	orr.w	r3, r3, #32
 80003c0:	60d3      	str	r3, [r2, #12]

	/*Enable UART2 interrupt in NVIC*/
	NVIC_EnableIRQ(USART2_IRQn);
 80003c2:	2026      	movs	r0, #38	@ 0x26
 80003c4:	f7ff ff1e 	bl	8000204 <__NVIC_EnableIRQ>

	/*Enable uart module*/
	USART2->CR1	|= CR1_UE;
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <uart2_rxtx_interrupt_init+0xec>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	4a05      	ldr	r2, [pc, #20]	@ (80003e4 <uart2_rxtx_interrupt_init+0xec>)
 80003ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003d2:	60d3      	str	r3, [r2, #12]
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40020000 	.word	0x40020000
 80003e0:	00f42400 	.word	0x00f42400
 80003e4:	40004400 	.word	0x40004400

080003e8 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80003f0:	bf00      	nop
 80003f2:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <uart2_write+0x2c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d0f9      	beq.n	80003f2 <uart2_write+0xa>

	/* write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a04      	ldr	r2, [pc, #16]	@ (8000414 <uart2_write+0x2c>)
 8000402:	b2db      	uxtb	r3, r3
 8000404:	6053      	str	r3, [r2, #4]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40004400 	.word	0x40004400

08000418 <USART_Text_Write_UART2>:
void USART_Text_Write_UART2( char *text)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
while(*text) uart2_write(*text++);
 8000420:	e006      	b.n	8000430 <USART_Text_Write_UART2+0x18>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	1c5a      	adds	r2, r3, #1
 8000426:	607a      	str	r2, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ffdc 	bl	80003e8 <uart2_write>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d1f4      	bne.n	8000422 <USART_Text_Write_UART2+0xa>
}
 8000438:	bf00      	nop
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b084      	sub	sp, #16
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	607a      	str	r2, [r7, #4]
	USARTx->BRR = comute_uart_bd(PeriphClk,BaudRate);
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	68b8      	ldr	r0, [r7, #8]
 8000452:	f000 f808 	bl	8000466 <comute_uart_bd>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	609a      	str	r2, [r3, #8]
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <comute_uart_bd>:
static uint16_t comute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	085a      	lsrs	r2, r3, #1
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	441a      	add	r2, r3
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	fbb2 f3f3 	udiv	r3, r2, r3
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	4618      	mov	r0, r3
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800048c:	480d      	ldr	r0, [pc, #52]	@ (80004c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000490:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000494:	480c      	ldr	r0, [pc, #48]	@ (80004c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000496:	490d      	ldr	r1, [pc, #52]	@ (80004cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000498:	4a0d      	ldr	r2, [pc, #52]	@ (80004d0 <LoopForever+0xe>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a0a      	ldr	r2, [pc, #40]	@ (80004d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004ac:	4c0a      	ldr	r4, [pc, #40]	@ (80004d8 <LoopForever+0x16>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ba:	f000 f819 	bl	80004f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f7ff fef5 	bl	80002ac <main>

080004c2 <LoopForever>:

LoopForever:
  b LoopForever
 80004c2:	e7fe      	b.n	80004c2 <LoopForever>
  ldr   r0, =_estack
 80004c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004d0:	08000578 	.word	0x08000578
  ldr r2, =_sbss
 80004d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004d8:	20000030 	.word	0x20000030

080004dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004dc:	e7fe      	b.n	80004dc <ADC_IRQHandler>

080004de <memset>:
 80004de:	4402      	add	r2, r0
 80004e0:	4603      	mov	r3, r0
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d100      	bne.n	80004e8 <memset+0xa>
 80004e6:	4770      	bx	lr
 80004e8:	f803 1b01 	strb.w	r1, [r3], #1
 80004ec:	e7f9      	b.n	80004e2 <memset+0x4>
	...

080004f0 <__libc_init_array>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000528 <__libc_init_array+0x38>)
 80004f4:	4c0d      	ldr	r4, [pc, #52]	@ (800052c <__libc_init_array+0x3c>)
 80004f6:	1b64      	subs	r4, r4, r5
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	2600      	movs	r6, #0
 80004fc:	42a6      	cmp	r6, r4
 80004fe:	d109      	bne.n	8000514 <__libc_init_array+0x24>
 8000500:	4d0b      	ldr	r5, [pc, #44]	@ (8000530 <__libc_init_array+0x40>)
 8000502:	4c0c      	ldr	r4, [pc, #48]	@ (8000534 <__libc_init_array+0x44>)
 8000504:	f000 f820 	bl	8000548 <_init>
 8000508:	1b64      	subs	r4, r4, r5
 800050a:	10a4      	asrs	r4, r4, #2
 800050c:	2600      	movs	r6, #0
 800050e:	42a6      	cmp	r6, r4
 8000510:	d105      	bne.n	800051e <__libc_init_array+0x2e>
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f855 3b04 	ldr.w	r3, [r5], #4
 8000518:	4798      	blx	r3
 800051a:	3601      	adds	r6, #1
 800051c:	e7ee      	b.n	80004fc <__libc_init_array+0xc>
 800051e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000522:	4798      	blx	r3
 8000524:	3601      	adds	r6, #1
 8000526:	e7f2      	b.n	800050e <__libc_init_array+0x1e>
 8000528:	08000570 	.word	0x08000570
 800052c:	08000570 	.word	0x08000570
 8000530:	08000570 	.word	0x08000570
 8000534:	08000574 	.word	0x08000574

08000538 <strcpy>:
 8000538:	4603      	mov	r3, r0
 800053a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800053e:	f803 2b01 	strb.w	r2, [r3], #1
 8000542:	2a00      	cmp	r2, #0
 8000544:	d1f9      	bne.n	800053a <strcpy+0x2>
 8000546:	4770      	bx	lr

08000548 <_init>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop
 800054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054e:	bc08      	pop	{r3}
 8000550:	469e      	mov	lr, r3
 8000552:	4770      	bx	lr

08000554 <_fini>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr
