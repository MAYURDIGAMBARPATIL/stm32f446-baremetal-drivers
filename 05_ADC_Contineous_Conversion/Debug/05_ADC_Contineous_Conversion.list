
05_ADC_Contineous_Conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800038c  08000394  00001394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800038c  0800038c  00001394  2**0
                  CONTENTS
  4 .ARM          00000000  0800038c  0800038c  00001394  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800038c  08000394  00001394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000390  08000390  00001390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000394  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000394  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000045a  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000158  00000000  00000000  0000181e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003e  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189d6  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000615  00000000  00000000  0001a3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa6c  00000000  00000000  0001aa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a546d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b8  00000000  00000000  000a54b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000a5568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000374 	.word	0x08000374

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000374 	.word	0x08000374

08000204 <main>:
uint32_t adc_read(void);

int var;

int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	pa1_adc_init();
 8000208:	f000 f80c 	bl	8000224 <pa1_adc_init>
	start_converstion();
 800020c:	f000 f83c 	bl	8000288 <start_converstion>
	while(1)
	{
		var=adc_read();
 8000210:	f000 f850 	bl	80002b4 <adc_read>
 8000214:	4603      	mov	r3, r0
 8000216:	461a      	mov	r2, r3
 8000218:	4b01      	ldr	r3, [pc, #4]	@ (8000220 <main+0x1c>)
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	e7f8      	b.n	8000210 <main+0xc>
 800021e:	bf00      	nop
 8000220:	2000001c 	.word	0x2000001c

08000224 <pa1_adc_init>:
	}

}
void pa1_adc_init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	/***********Configure the ADC GPIOA Pins*******************/

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000228:	4b14      	ldr	r3, [pc, #80]	@ (800027c <pa1_adc_init+0x58>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022c:	4a13      	ldr	r2, [pc, #76]	@ (800027c <pa1_adc_init+0x58>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6313      	str	r3, [r2, #48]	@ 0x30

	/*SET mode of PA1 as analog pin */
	GPIOA->MODER |= (1U<<2);
 8000234:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <pa1_adc_init+0x5c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a11      	ldr	r2, [pc, #68]	@ (8000280 <pa1_adc_init+0x5c>)
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 8000240:	4b0f      	ldr	r3, [pc, #60]	@ (8000280 <pa1_adc_init+0x5c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0e      	ldr	r2, [pc, #56]	@ (8000280 <pa1_adc_init+0x5c>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6013      	str	r3, [r2, #0]

	/***********Configure the ADC Module*******************/
	/*Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 800024c:	4b0b      	ldr	r3, [pc, #44]	@ (800027c <pa1_adc_init+0x58>)
 800024e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000250:	4a0a      	ldr	r2, [pc, #40]	@ (800027c <pa1_adc_init+0x58>)
 8000252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000256:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Conversion sequence start */
	ADC1->SQR3 = ADC_CH1;
 8000258:	4b0a      	ldr	r3, [pc, #40]	@ (8000284 <pa1_adc_init+0x60>)
 800025a:	2201      	movs	r2, #1
 800025c:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Conversion sequence length */
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 800025e:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <pa1_adc_init+0x60>)
 8000260:	2200      	movs	r2, #0
 8000262:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= CR2_ADON;
 8000264:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <pa1_adc_init+0x60>)
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	4a06      	ldr	r2, [pc, #24]	@ (8000284 <pa1_adc_init+0x60>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6093      	str	r3, [r2, #8]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020000 	.word	0x40020000
 8000284:	40012000 	.word	0x40012000

08000288 <start_converstion>:

void start_converstion(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	/*Enable contineous conversion*/
	ADC1->CR2 |= CR2_CONT;
 800028c:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <start_converstion+0x28>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	4a07      	ldr	r2, [pc, #28]	@ (80002b0 <start_converstion+0x28>)
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6093      	str	r3, [r2, #8]
	/*Start adc conversion */
	ADC1->CR2 |= CR2_SWSTART;
 8000298:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <start_converstion+0x28>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a04      	ldr	r2, [pc, #16]	@ (80002b0 <start_converstion+0x28>)
 800029e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002a2:	6093      	str	r3, [r2, #8]

}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40012000 	.word	0x40012000

080002b4 <adc_read>:

uint32_t adc_read(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 80002b8:	bf00      	nop
 80002ba:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <adc_read+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f003 0302 	and.w	r3, r3, #2
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <adc_read+0x6>

	/*Read Converted result*/
	return (ADC1->DR);
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <adc_read+0x20>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	40012000 	.word	0x40012000

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	@ (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	@ (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	@ (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	@ (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 f811 	bl	800032c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f7ff ff7b 	bl	8000204 <main>

0800030e <LoopForever>:

LoopForever:
  b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800031c:	08000394 	.word	0x08000394
  ldr r2, =_sbss
 8000320:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000324:	20000020 	.word	0x20000020

08000328 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC_IRQHandler>
	...

0800032c <__libc_init_array>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	4d0d      	ldr	r5, [pc, #52]	@ (8000364 <__libc_init_array+0x38>)
 8000330:	4c0d      	ldr	r4, [pc, #52]	@ (8000368 <__libc_init_array+0x3c>)
 8000332:	1b64      	subs	r4, r4, r5
 8000334:	10a4      	asrs	r4, r4, #2
 8000336:	2600      	movs	r6, #0
 8000338:	42a6      	cmp	r6, r4
 800033a:	d109      	bne.n	8000350 <__libc_init_array+0x24>
 800033c:	4d0b      	ldr	r5, [pc, #44]	@ (800036c <__libc_init_array+0x40>)
 800033e:	4c0c      	ldr	r4, [pc, #48]	@ (8000370 <__libc_init_array+0x44>)
 8000340:	f000 f818 	bl	8000374 <_init>
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	10a4      	asrs	r4, r4, #2
 8000348:	2600      	movs	r6, #0
 800034a:	42a6      	cmp	r6, r4
 800034c:	d105      	bne.n	800035a <__libc_init_array+0x2e>
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f855 3b04 	ldr.w	r3, [r5], #4
 8000354:	4798      	blx	r3
 8000356:	3601      	adds	r6, #1
 8000358:	e7ee      	b.n	8000338 <__libc_init_array+0xc>
 800035a:	f855 3b04 	ldr.w	r3, [r5], #4
 800035e:	4798      	blx	r3
 8000360:	3601      	adds	r6, #1
 8000362:	e7f2      	b.n	800034a <__libc_init_array+0x1e>
 8000364:	0800038c 	.word	0x0800038c
 8000368:	0800038c 	.word	0x0800038c
 800036c:	0800038c 	.word	0x0800038c
 8000370:	08000390 	.word	0x08000390

08000374 <_init>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr

08000380 <_fini>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr
